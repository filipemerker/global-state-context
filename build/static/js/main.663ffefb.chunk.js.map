{"version":3,"sources":["context/store.js","context/modules/filters.js","context/index.js","components/CheckboxList.jsx","components/ProductTile.jsx","components/Slider.jsx","container/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["store","createContext","Provider","reducers","state","action","Object","keys","reduce","combined","key","combineReducers","filters","type","price","options","initialState","label","name","checked","ContextProvider","props","useReducer","dispatch","value","children","useDispatch","useContext","callback","useSelector","createSelector","selected","selector","memo","console","log","map","item","i","id","onChange","e","updatedItem","target","getState","optionsUpdate","list","getUpdatedList","ProductTile","useState","setValue","min","max","onMouseUp","priceUpdate","Number","Search","className","filter","join","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yMAIaA,EAAQC,0BACbC,EAAaF,EAAbE,SAQFC,EANkB,SAACA,GAAD,OAAc,eAACC,EAAD,uDAAS,GAAIC,EAAb,8CACpCC,OAAOC,KAAKJ,GAAUK,QAAO,SAACC,EAAUC,GAEtC,OADAD,EAASC,GAAOP,EAASO,GAAKN,EAAMM,GAAML,GACnCI,IACN,KAEYE,CAAgB,CAC/BC,QCLqB,SAACR,EAAOC,GAC7B,OAAQA,EAAOQ,MACb,IAAK,eACH,OAAO,2BAAKT,GAAZ,IAAmBU,MAAOT,EAAOS,QAGnC,IAAK,iBACH,OAAO,2BAAKV,GAAZ,IAAmBW,QAASV,EAAOU,UAGrC,QACE,OAAOX,MDHPY,EAAe,CACnBJ,QClBmB,CACnBE,MAAO,GACPC,QAAS,CACP,CAAEE,MAAO,QAASC,KAAM,QAASC,SAAS,GAC1C,CAAEF,MAAO,SAAUC,KAAM,SAAUC,SAAS,GAC5C,CAAEF,MAAO,QAASC,KAAM,QAASC,SAAS,MDgBjCC,EAAkB,SAACC,GAAW,IAAD,EACdC,qBAAWnB,EAAUa,GADP,mBACjCZ,EADiC,KAC1BmB,EAD0B,KAGxC,OAAO,kBAACrB,EAAD,CAAUsB,MAAO,CAACpB,EAAOmB,IAAYF,EAAMI,W,OEnB7C,SAASC,IAAe,IAAD,EACFC,qBAAW3B,GADT,mBACrBI,EADqB,KACdmB,EADc,KAG5B,OAAO,SAACK,GAAD,OAAcA,EAASL,GAAU,kBAAMnB,MAGzC,SAASyB,EAAYD,GAAW,IAAD,EACpBD,qBAAW3B,GAApBI,EAD6B,oBAIpC,OAFiB0B,YAAe,CAACF,IAAW,SAACG,GAAD,OAAcA,IAEnDC,CAAS5B,GC+BH6B,sBA1Cf,WACE,IAAMV,EAAWG,IACXX,EAAUc,GAAY,SAACzB,GAAD,OAAWA,EAAMQ,QAAQG,WAYrD,OAXAmB,QAAQC,IAAI,0BAYV,6BACE,iCACE,wCACA,6BACCpB,EAAQqB,KAAI,SAACC,EAAMC,GAAP,OACX,yBAAK5B,IAAK2B,EAAKnB,MACb,2BACEL,KAAK,WACL0B,GAAIF,EAAKnB,KACTA,KAAMmB,EAAKnB,KACXM,MAAOa,EAAKnB,KACZC,QAASkB,EAAKlB,QACdqB,SAAU,SAACC,GACT,IAAMC,EAAW,2BAAQL,GAAR,IAAclB,QAASsB,EAAEE,OAAOxB,UAEjDI,EFNa,SAACR,GAAD,OAAa,SAACQ,EAAUqB,GACnDrB,EAAS,CAAEV,KAAM,iBAAkBE,aEKZ8B,CAzBA,SAACC,EAAMJ,GAAP,OACrBI,EAAKV,KAAI,SAACC,GACR,OAAIK,EAAYxB,OAASmB,EAAKnB,KACrBwB,EAGFL,KAmB0BU,CAAehC,EAAS2B,QAGnD,mCAASL,EAAKpB,OACd,sCC1BG+B,MAVf,YAAgC,IAAT9B,EAAQ,EAARA,KACrB,OACE,6BACE,gCACE,2BAAIA,MCwBGe,kBA1BA,WACb,IAAMV,EAAWG,IACXZ,EAAQe,GAAY,SAACzB,GAAD,OAAWA,EAAMQ,QAAQE,SAFhC,EAGOmC,mBAASnC,GAHhB,mBAGZU,EAHY,KAGL0B,EAHK,KAMnB,OAFAhB,QAAQC,IAAI,oBAGV,6BACE,gCACE,sCAAYX,EAAZ,WACA,6BACA,2BACEX,KAAK,QACL0B,GAAG,MACHrB,KAAK,MACLiC,IAAI,IACJC,IAAI,KACJ5B,MAAOA,EACPgB,SAAU,SAACC,GAAD,OAAOS,EAAST,EAAEE,OAAOnB,QACnC6B,UAAW,SAACZ,GAAD,OAAOlB,EJCD,SAACT,GAAD,OAAW,SAACS,EAAUqB,GAC/CrB,EAAS,CAAEV,KAAM,eAAgBC,WIFEwC,CAAYC,OAAOd,EAAEE,OAAOnB,iBCmBlDgC,MAnCf,WAAmB,IAAD,EACW3B,GAAY,SAACzB,GAAD,OAAWA,EAAMQ,WAAhDE,EADQ,EACRA,MAAOC,EADC,EACDA,QAEf,OACE,yBAAK0C,UAAU,UACb,gCACE,+DACA,sDAC0B3C,EAD1B,UAEE,6BAFF,4BAG4B,IACzBC,EACE2C,QAAO,qBAAGvC,WACViB,KAAI,qBAAGlB,QACPyC,KAAK,MAPV,MAWF,+BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,iCACE,4BACG,GAAGvB,KAAI,WAAWE,GAAX,IAAGpB,EAAH,EAAGA,KAAH,OACN,wBAAIR,IAAK4B,GACP,kBAAC,EAAD,CAAapB,KAAMA,YCrBlB0C,EARH,WACV,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.663ffefb.chunk.js","sourcesContent":["import React, { useReducer, createContext } from 'react'\nimport * as filters from './modules/filters'\n//import products from './products'\n\nexport const store = createContext()\nconst { Provider } = store\n\nconst combineReducers = (reducers) => (state = {}, action) =>\n  Object.keys(reducers).reduce((combined, key) => {\n    combined[key] = reducers[key](state[key], action)\n    return combined\n  }, {})\n\nconst reducers = combineReducers({\n  filters: filters.reducer,\n})\n\nconst initialState = {\n  filters: filters.state,\n}\n\nexport const ContextProvider = (props) => {\n  const [state, dispatch] = useReducer(reducers, initialState)\n\n  return <Provider value={[state, dispatch]}>{props.children}</Provider>\n}\n","export const state = {\n  price: 10,\n  options: [\n    { label: 'First', name: 'first', checked: true },\n    { label: 'Second', name: 'second', checked: false },\n    { label: 'Third', name: 'third', checked: false },\n  ],\n}\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case 'UPDATE_PRICE': {\n      return { ...state, price: action.price }\n    }\n\n    case 'UPDATE_OPTIONS': {\n      return { ...state, options: action.options }\n    }\n\n    default:\n      return state\n  }\n}\n\nexport const priceUpdate = (price) => (dispatch, getState) => {\n  dispatch({ type: 'UPDATE_PRICE', price })\n}\n\nexport const optionsUpdate = (options) => (dispatch, getState) => {\n  dispatch({ type: 'UPDATE_OPTIONS', options })\n}\n","import { useContext } from 'react'\nimport { createSelector } from 'reselect'\n\nimport { store } from './store'\n\nexport function useDispatch() {\n  const [state, dispatch] = useContext(store)\n\n  return (callback) => callback(dispatch, () => state)\n}\n\nexport function useSelector(callback) {\n  const [state] = useContext(store)\n  const selector = createSelector([callback], (selected) => selected)\n\n  return selector(state)\n}\n","import React, { memo } from 'react'\nimport { optionsUpdate } from '../context/modules/filters'\nimport { useDispatch, useSelector } from '../context'\n\nfunction CheckboxList() {\n  const dispatch = useDispatch()\n  const options = useSelector((state) => state.filters.options)\n  console.log('CheckboxList rendered!')\n\n  const getUpdatedList = (list, updatedItem) =>\n    list.map((item) => {\n      if (updatedItem.name === item.name) {\n        return updatedItem\n      }\n\n      return item\n    })\n\n  return (\n    <div>\n      <section>\n        <h3>Options:</h3>\n        <br />\n        {options.map((item, i) => (\n          <div key={item.name}>\n            <input\n              type=\"checkbox\"\n              id={item.name}\n              name={item.name}\n              value={item.name}\n              checked={item.checked}\n              onChange={(e) => {\n                const updatedItem = { ...item, checked: e.target.checked }\n\n                dispatch(optionsUpdate(getUpdatedList(options, updatedItem)))\n              }}\n            />\n            <label> {item.label}</label>\n            <br />\n          </div>\n        ))}\n      </section>\n    </div>\n  )\n}\n\nexport default memo(CheckboxList)\n","import React from 'react'\n\nfunction ProductTile({ name }) {\n  return (\n    <div>\n      <header>\n        <p>{name}</p>\n      </header>\n    </div>\n  )\n}\n\nexport default ProductTile\n","import React, { useState, memo } from 'react'\nimport { priceUpdate } from '../context/modules/filters'\nimport { useDispatch, useSelector } from '../context'\n\nconst Slider = () => {\n  const dispatch = useDispatch()\n  const price = useSelector((state) => state.filters.price)\n  const [value, setValue] = useState(price)\n  console.log('Slider rendered!')\n\n  return (\n    <div>\n      <header>\n        <h3>Price: {value} €</h3>\n        <br />\n        <input\n          type=\"range\"\n          id=\"vol\"\n          name=\"vol\"\n          min=\"0\"\n          max=\"50\"\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          onMouseUp={(e) => dispatch(priceUpdate(Number(e.target.value)))}\n        />\n      </header>\n    </div>\n  )\n}\n\nexport default memo(Slider)\n","import React from 'react'\nimport CheckboxList from '../components/CheckboxList'\nimport ProductTile from '../components/ProductTile'\nimport Slider from '../components/Slider'\n\nimport { useSelector } from '../context'\n\nfunction Search() {\n  const { price, options } = useSelector((state) => state.filters)\n\n  return (\n    <div className=\"Search\">\n      <header>\n        <h2>Context global state experiment</h2>\n        <h5>\n          The selected price is: {price} €\n          <br />\n          The selected options are:{' '}\n          {options\n            .filter(({ checked }) => checked)\n            .map(({ name }) => name)\n            .join(', ')}\n          .\n        </h5>\n      </header>\n      <aside>\n        <CheckboxList />\n        <Slider />\n      </aside>\n      <section>\n        <ul>\n          {[].map(({ name }, i) => (\n            <li key={i}>\n              <ProductTile name={name} />\n            </li>\n          ))}\n        </ul>\n      </section>\n    </div>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport { ContextProvider } from './context/store'\nimport Search from './container/Search'\n\nconst App = () => {\n  return (\n    <ContextProvider>\n      <Search />\n    </ContextProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}